package Constructors_Initialization;

/*
 * Used to initialise instance variables. Called when you do
 * 			new constructor(parameterList);
 * 
 * 1. No return type. You may have a return statement but it mustn't
 * return a value.
 * 
 * 2. Name must be the same as the class name.
 * 
 * 3. Every class including abstract class has at-least one constructor.
 * If you don't declare on the compiler inserts a default one taking no
 * parameters.
 * 
 * 4. Constructors are often overloaded. They cannot be overridden.
 * 
 * 5. may have any access modifier. A compiler supplied constructor has the 
 * same access modifier as the class.
 * 
 * 6. Whenever you call a class constructor its super class constructor 
 * is made to run first.
 * 
 */

class B{
	B(){ /* initialise fields of B */ }
}
	
class A extends B{
	A(){/* initialise fields of A */}
}



public class BasicFacts {

	public static void main(String[] args) {

		/*
		 * What happens when you call new A()?
		 * 
		 * 1) class A and B are loaded.
		 * 
		 * 2) Allocate memory for fields of A, B and Object and intialises with default values.
		 * For example: primitive value have zero and reference value have null.
		 * 
		 * 3) Allocated area's object reference is passed to constructor of A.
		 * 
		 * 4) Initially, constructor of A calls constructor of B, by implicitly passing
		 * the same object reference.
		 * 
		 * 5) Constructor of B calls constructor of 'Object', by implicitly passing
		 * the same object reference.
		 * 
		 * 6) constructor of 'Object' completes its work and the control comes back to 
		 * where constructor B left and then constructor of A.
		 * 
		 */

	}

}