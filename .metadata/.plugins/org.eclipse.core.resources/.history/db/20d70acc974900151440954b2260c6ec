package JavaCollections;

import java.util.Iterator;
import java.util.NoSuchElementException;

import cs61b.homework4.DListNode;


/**
 * Dlist using sentinel node
 * 
 * @author mohet01
 *
 * @param <T>
 */
public class DblyLinkList<T> implements Iterable<T>{

	/*
	 * Representation - starts
	 */
	/**
	 * DListNode is a node in a DblyLinkList
	 * 
	 * @author mohet01
	 *
	 */
	private class DListNode<T> {

		/**
		 * item references the item stored in the current node. prev references the
		 * previous node in the DList. next references the next node in the DList.
		 *
		 * 
		 */
		
		T item;
		DListNode<T> prev;
		DListNode<T> next;

		/**
		 * DListNode() constructor.
		 */
		DListNode() {
			this(null);
		}

		DListNode(T item) {
			this.item = item;
			this.prev = null;
			this.next = null;
		}
		
	}

	
	private class Itr implements Iterator<T>{

		private DListNode<T>  currentPosition = head;  
		
		private int  lastRet = -1;
		
		@Override
		public boolean hasNext() {
			return currentPosition.next != head;
		}
		
		@Override
		public T next() throws NoSuchElementException {
			if (currentPosition.next == head){
				throw new NoSuchElementException();
			}
			T nextItem = currentPosition.next.item;
			lastRet = +1;
			currentPosition = currentPosition.next; //points to the node that is already read
			return nextItem; 
		} 
		
		@Override
		public void remove() throws NoSuchElementException{
			if(lastRet < 0 ){
				throw new IllegalStateException();
			}else{
				//this item is already read using next()
				currentPosition.item = null; 
				currentPosition.prev.next = currentPosition.next;
				currentPosition.next.prev = currentPosition.prev;
				currentPosition = currentPosition.prev;
				lastRet = -1;
			}
		}
	}
	
	/**
	 * head references the sentinel node.
	 *
	 * Being sentinel as part of implementation detail, will avoid null checks,
	 * while performing mutable operations on list.
	 * 
	 * DO NOT CHANGE THE FOLLOWING FIELD DECLARATIONS.
	 * 
	 */
	private DListNode<T> head;
	private int size;
	

	/**
	 *  newNode() calls the DListNode constructor.  Use this class to allocate
	 *  new DListNodes rather than calling the DListNode constructor directly.
	 *  That way, only this method needs to be overridden if a subclass of DList
	 *  wants to use a different kind of node.
	 *  @param item the item to store in the node.
	 *  @param prev the node previous to this node.
	 *  @param next the node following this node.
	 */
	 protected DListNode newNode(T item, DListNode prev, DListNode next) {
	    return new DListNode(item, prev, next);
	 }
	  
	
	/*
	 * Representation - ends
	 * 
	 * DblyLinkList invariants: 
	 * 1) head != null. 
	 * 2) For any DListNode x in a DblyLinkList, x.next != null. 
	 * 3) For any DListNode x in a DblyLinkList, x.prev != null. 
	 * 4) For any DListNode x in a DblyLinkList, if x.next == y, then y.prev == x.
	 * 5) For any DListNode x in a DblyLinkList, if x.prev == y, then y.next == x.
	 * 6) size is the number of DListNode's, NOT COUNTING the sentinel (referenced
	 * by "head"), that can be accessed from the sentinel by a sequence of "next" references.
	 */
	
		
	/*
	 * User Interface - starts
	 */
	/**
	 * DblyLinkList() constructor for an empty DblyLinkList.
	 */
	public DblyLinkList() {
		this.head = new DListNode<T>();
		this.head.next = this.head;
		this.head.prev = this.head;
	}

	/**
	 * DblyLinkList() constructor for a one-node DblyLinkList.
	 */
	public DblyLinkList(T item) {
		this();
		this.insertFront(item);
	}

	/**
	 * Return the size of the linked list
	 * @return
	 */
	public int size(){
		return size;
	}
	
	public void remove(int index) throws NoSuchElementException{
		if(index > size()){
			throw new NoSuchElementException();
		}
		DListNode<T> node;
	    for (node = head; index-- > 0; node = node.next);
	    node.item = null;
	    node.prev.next = node.next;
	    node.next.prev = node.prev;
	}
	
	
	/**
	 * Inserts a non-sentinel node at front of the list.
	 *  
	 * @param item
	 */
	
	public void insertFront(T item){
		
		DListNode<T> node = new DListNode<>(item);
		node.next = head.next;
		node.prev = head;
		node.next.prev = node;
		head.next = node;
		this.size++;
	}
	
	/**
	 * Remove first non-sentinel node from the list.
	 * Do not require size check before remove operation
	 * 
	 */
	public void removeFront() throws UnsupportedOperationException{
		if (this.size() < 0){
			throw new UnsupportedOperationException("removeFront");
		}else{
			head.next.next.prev = head;
			head.next = head.next.next;
			this.size--;
		}
	}
	
	public T get(int index) throws NoSuchElementException{
	    if (index > size()) throw new NoSuchElementException();
	    DListNode<T> node;
	    for (node = head; index-- > 0; node = node.next);
	    return node.item;
	}
	
	@Override
	public Iterator<T> iterator() {
		return new Itr();
	}
	
}
