package StaticMemberClasses;

/*
 * An interface is a static interface, when declared as a member of
 * a top level interface.
 * 
 * An interface within an interface can only be public.
 * 
 * 
 */

import java.util.AbstractCollection;
import java.util.AbstractMap;
import java.util.AbstractSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import java.util.Spliterator;
import java.util.HashMap.EntrySet;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

interface Map<K,V> {

	int size();
    boolean isEmpty();
    boolean containsKey(Object key);
    boolean containsValue(Object value);
    V get(Object key);
    V put(K key, V value);
    V remove(Object key);
    void putAll(Map<? extends K, ? extends V> m);
    void clear();
    Set<K> keySet();
    Collection<V> values();
    Set<Map.Entry<K, V>> entrySet();
    boolean equals(Object o);
    int hashCode();

    interface Entry<K,V> {// A nested interface can only be "public static".
        K getKey();
        V getValue();
        V setValue(V value);
        boolean equals(Object o);
        int hashCode();
        public static <K extends Comparable<? super K>, V> Comparator<Map.Entry<K,V>> comparingByKey() {
            return (Comparator<Map.Entry<K, V>> & Serializable)
                (c1, c2) -> c1.getKey().compareTo(c2.getKey());
        }
    }

}



class HashMap<K,V> extends AbstractMap<K,V>
	implements Map<K,V>, Cloneable, Serializable {

		private static final long serialVersionUID = 362498820763181265L;
		static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16
		static final int MAXIMUM_CAPACITY = 1 << 30;
		static final float DEFAULT_LOAD_FACTOR = 0.75f;
		static final int TREEIFY_THRESHOLD = 8;
		static final int UNTREEIFY_THRESHOLD = 6;
		static final int MIN_TREEIFY_CAPACITY = 64;
		
		static class Node<K,V> implements Map.Entry<K,V> {
			final int hash;
			final K key;
			V value;
			Node<K,V> next;

			Node(int hash, K key, V value, Node<K,V> next) {
				this.hash = hash;
				this.key = key;
				this.value = value;
				this.next = next;
			}
			
			public final K getKey()        { return key; }
			public final V getValue()      { return value; }
			public final String toString() { return key + "=" + value; }

			public final int hashCode() {
				return Objects.hashCode(key) ^ Objects.hashCode(value);
			}

			public final V setValue(V newValue) {
				V oldValue = value;
				value = newValue;
				return oldValue;
			}

			public final boolean equals(Object o) {
				if (o == this)
					return true;
				if (o instanceof Map.Entry) {
					Map.Entry<?,?> e = (Map.Entry<?,?>)o;
					if (Objects.equals(key, e.getKey()) &&
							Objects.equals(value, e.getValue()))
					return true;
				}
				return false;
			}
		}

		/* ---------------- Fields -------------- */
		transient Node<K,V>[] table;
		transient Set<Map.Entry<K,V>> entrySet;
		transient int size;
		transient int modCount;
		int threshold;
		final float loadFactor;
		
		public HashMap(int initialCapacity, float loadFactor) {
	        if (initialCapacity < 0)
	            throw new IllegalArgumentException("Illegal initial capacity: " +
	                                               initialCapacity);
	        if (initialCapacity > MAXIMUM_CAPACITY)
	            initialCapacity = MAXIMUM_CAPACITY;
	        if (loadFactor <= 0 || Float.isNaN(loadFactor))
	            throw new IllegalArgumentException("Illegal load factor: " +
	                                               loadFactor);
	        this.loadFactor = loadFactor;
	    }
		
		@Override
		public void putAll(Map<? extends K, ? extends V> m) {
			
			
		}
		
		@Override
		public Set<Map.Entry<K,V>> entrySet() {
	        return null;
	    }
		
}


public class NestedInterfaceInInterface {

	public static void main(String[] args) {
		

	}
}