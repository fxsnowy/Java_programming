package Constructors_Initialization;

/*
 * super and this as a call
 * 
 * 1) super(parameterList) is a call to the constructor of the direct 
 * superclass.
 * 
 * 2) this(parameterList) is a call to a constructor within the class.
 * 
 * 3) The first statement of any constructor must be 'this(parameterList)'
 * or 'super(parameterList)'. You cannot use 'this(parameterList)' or 
 * 'super(parameterList)' anywhere else except as a first statement of a 
 * constructor.
 * 
 * 4) If you don't put a 'this(parameterList)' or 'super(parameterList)' 
 * call in as the first statement the compiler will insert 'super()' as 
 * the first statement.
 * 
 * 5) There is no access to instance methods or fields until after 
 * 'super(parameterList)' has run. That means you may only use static 
 * methods and fields, or constructor arguments in any expressions passed
 * as parameters to 'this(parameterList)' or 'super(parameterList)'.
 *  
 * 
 */

class C{
	// compiler does not insert constructor A() here
	C(int i){ /* code */}
}

class D extends C{
	static int w; int i;
	D(){
		this(42);
	}
	
	D(int i){
		this.i = i;
	}
	
	
}

public class SuperAndThis {

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
