package Serialization;

/*
 * 
 * 1) A typical enterprise application will have multiple components
 * and will be distributed across various systems and networks. In 
 * Java, everything is represented as objects; if two Java components 
 * want to communicate with each other, there needs be a mechanism to 
 * exchange data. One way to achieve this is to define your own protocol 
 * and transfer an object. This means that the receiving end must know
 * the protocol used by the sender to re-create the object, which would 
 * make it very difficult to talk to third-party components. Hence, there 
 * needs to be a generic and efficient protocol to transfer the object 
 * between components. Serialisation is defined for this purpose, and 
 * Java components use this protocol to transfer objects.
 * 
 * How to serialise an object?
 * 
 * In order to serialise an object, you need to ensure that the class of
 * the object implements the java.io.Serializable interface, as shown below,
 * 
 */


import java.io.Serializable;

class TestSerial implements Serializable {
	public byte version = 100;
	public byte count = 0;
}


/*
 * The Serializable interface is a marker interface; it declares no methods 
 * at all. It tells the serialization mechanism that the class can be serialized.
 */
public class JavaSerialization {

}
