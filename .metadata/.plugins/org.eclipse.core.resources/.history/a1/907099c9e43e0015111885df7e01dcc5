/* LockDList.java */
package cs61b.homework4;

public class LockDList extends DList {

	/**
	 * newNode() calls the LockDListNode constructor. Use this method to
	 * allocate new LockDListNodes rather than calling the LockDListNode
	 * constructor directly.
	 * 
	 * @param item
	 *            the item to store in the node.
	 * @param prev
	 *            the node previous to this node.
	 * @param next
	 *            the node following this node.
	 */
	protected LockDListNode newNode(Object item, DListNode prev, DListNode next) {
		return new LockDListNode(item, prev, next);
	}

	/**
	 * LockDList() constructor for an empty LockDList.
	 */
	public LockDList() {
		// Compiler inserts super();
	}

	/**
	 * remove() removes "node" from this DList. If "node" is null, do nothing.
	 * Performance: runs in O(1) time.
	 */
	public void remove(DListNode node) {
		
		if (node == null) {
			return;
		}
		
		if ((node instanceof LockDListNode)
				&& (((LockDListNode) node).lock == true)) {
			return;
		} else {
			super.remove(node);
		}
	}

	/**
	 * 
	 * @param node
	 */
	public void lockNode(DListNode node) {
		
		if (node == null) {
			return;
		} 
		
		if (node instanceof LockDListNode) {
			((LockDListNode) node).lock = true;
		}

	}

}
