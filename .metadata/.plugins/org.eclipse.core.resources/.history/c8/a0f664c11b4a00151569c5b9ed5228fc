package BigOhNotation;

/*
 * Big O notation is a way to measure how well a computer algorithm 
 * scales as the amount of data involved increases. It is not always
 * a measure of speed as you'll see below This is a rough overview 
 * of Big O and doesn't cover topics such as asymptotic analysis,
 * which covers comparing algorithms as data approaches infinity
 * What we are defining is the part of the algorithm that has the
 * greatest effect. For example
 * 
 * 45n^3 + 20n^2 + 19 = 84 (n=1)
 * 45n^3 + 20n^2 + 19 = 459 (n=2) Does 19 matter?
 * 45n^3 + 20n^2 + 19 = 47019 (n=10)
 * 
 * Does the 20n^2 matter if 45n^3 = 45,000?
 * Has an O(n^3) Order of n-cubed
 * 
 */
public class BigOhNotation {
	
	private int[] theArray;
	private int arraySize;
	private int itemsInArray = 0;
	static long startTime;
	static long endTime;
	

	//O(1)
	public void addItemToArray(int newItem){
		theArray[itemsInArray++] = newItem;
	}
	
	//O(n)
	public void linearSearchForValue(int value){
		boolean valueInArray = false;
		String indexsWithValue = "";
		
		startTime = System.currentTimeMillis();
		
		for(int i = 0; i < arraySize; i++){
			if(theArray[i] == value){
				valueInArray = true;
				indexsWithValue += i + " ";
			}
		}
		
		System.out.println("Value found: " + valueInArray);
		endTime = System.currentTimeMillis();
		System.out.println("Linear search took: " + (endTime - startTime));
	}

	
	public void generateRandomArray() {

		for (int i = 0; i < arraySize; i++) {

			theArray[i] = (int) (Math.random() * 1000) + 10;

		}

		itemsInArray = arraySize - 1;

	}
	
	public void swapValues(int indexOne, int indexTwo) {

		int temp = theArray[indexOne];
		theArray[indexOne] = theArray[indexTwo];
		theArray[indexTwo] = temp;

	}

	BigOhNotation(int size) {

		arraySize = size;

		theArray = new int[size];

	}
	
	// O(N^2) Time to complete will be proportional to
		// the square of the amount of data (Bubble Sort)
		// Algorithms with more nested iterations will result
		// in O(N^3), O(N^4), etc. performance

		// Each pass through the outer loop (0)N requires us
		// to go through the entire list again so N multiplies
		// against itself or it is squared

		public void bubbleSort() {

			startTime = System.currentTimeMillis();

			for (int i = arraySize - 1; i > 1; i--) {

				for (int j = 0; j < i; j++) {

					if (theArray[j] > theArray[j + 1]) {

						swapValues(j, j + 1);

					}
				}
			}

			endTime = System.currentTimeMillis();

			System.out.println("Bubble Sort Took " + (endTime - startTime));
		}

		
		
	public static void main(String[] args) {
		
		BigOhNotation testAlgo2 = new BigOhNotation(100000);
		testAlgo2.generateRandomArray();

		BigOhNotation testAlgo3 = new BigOhNotation(200000);
		testAlgo3.generateRandomArray();

		BigOhNotation testAlgo4 = new BigOhNotation(300000);
		testAlgo4.generateRandomArray();

		testAlgo2.linearSearchForValue(20);
		testAlgo3.linearSearchForValue(20);
		testAlgo4.linearSearchForValue(20);
		
	}

	
}
